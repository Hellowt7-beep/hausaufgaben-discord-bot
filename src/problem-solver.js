import { GoogleGenerativeAI } from '@google/generative-ai';
import { Storage } from 'megajs';
import { config } from 'dotenv';
import { performOCR, performOCRWithRetry } from './ocr-service.js';

config();

let megaStorage = null;

// Verf√ºgbare F√§cher
const SUPPORTED_SUBJECTS = [
    'deutsch', 'mathe', 'english', 'franz√∂sisch', 'franzoesisch', 'fr',
    'latein', 'geschichte', 'physik', 'chemie', 'religion ev', 'religion kt', 'ethik'
];

async function connectToMega() {
    if (megaStorage) return megaStorage;

    try {
        if (!process.env.MEGA_EMAIL || !process.env.MEGA_PASSWORD) {
            throw new Error('MEGA Login-Daten fehlen in .env Datei');
        }

        console.log('üîó Verbinde mit MEGA...');
        megaStorage = new Storage({
            email: process.env.MEGA_EMAIL,
            password: process.env.MEGA_PASSWORD
        });
        await megaStorage.ready;
        console.log('‚úÖ MEGA Verbindung erfolgreich');
        return megaStorage;
    } catch (error) {
        throw new Error('MEGA Verbindung fehlgeschlagen. Pr√ºfe deine Login-Daten.');
    }
}

export async function findBookPage(fach, seiteNummer) {
    const storage = await connectToMega();

    // Normalisiere Fach-Namen
    const normalizedFach = normalizeFach(fach);

    if (!SUPPORTED_SUBJECTS.includes(normalizedFach)) {
        throw new Error(`Fach "${fach}" wird nicht unterst√ºtzt. Verf√ºgbare F√§cher: ${SUPPORTED_SUBJECTS.join(', ')}`);
    }

    // Suche nach Datei mit verschiedenen Patterns
    const patterns = [
        `${normalizedFach}_seite_${seiteNummer}`,
        `${normalizedFach}_${seiteNummer}`,
        `${fach.toLowerCase()}_seite_${seiteNummer}`,
        `${fach.toLowerCase()}_${seiteNummer}`
    ];

    console.log(`üîç Suche nach Buchseite: ${patterns.join(' oder ')}`);

    // Durchsuche alle Dateien
    const files = storage.files;
    const foundFile = Object.values(files).find(file => {
        const name = file.name?.toLowerCase();
        return name && patterns.some(pattern =>
            name.includes(pattern.toLowerCase()) &&
            (name.endsWith('.jpg') || name.endsWith('.png') || name.endsWith('.jpeg') || name.endsWith('.pdf'))
        );
    });

    if (!foundFile) {
        throw new Error(`Datei nicht gefunden f√ºr: ${fach} Seite ${seiteNummer}

Erwartete Dateiformate:
‚Ä¢ ${patterns[0]}.jpg/.png
‚Ä¢ ${patterns[1]}.jpg/.png

Stelle sicher, dass die Datei in MEGA hochgeladen ist.`);
    }

    console.log(`üìñ Buchseite gefunden: ${foundFile.name}`);
    return foundFile;
}

// Neue Funktion: Finde alle Material-Dateien f√ºr eine Seite
export async function findMaterialFiles(fach, seiteNummer) {
    const storage = await connectToMega();

    // Normalisiere Fach-Namen
    const normalizedFach = normalizeFach(fach).toUpperCase();

    // Suche nach allen Dateien die mit MATERIAL_[FACH]_SEITE_[NUMMER] anfangen
    const basePattern = `MATERIAL_${normalizedFach}_SEITE_${seiteNummer}`;

    console.log(`üîç Suche nach Material-Dateien: ${basePattern}*`);

    // Durchsuche alle Dateien
    const files = storage.files;
    const foundFiles = Object.values(files).filter(file => {
        const name = file.name?.toUpperCase();
        return name &&
               name.startsWith(basePattern) &&
               (name.endsWith('.JPG') || name.endsWith('.PNG') || name.endsWith('.JPEG') || name.endsWith('.PDF'));
    });

    if (foundFiles.length === 0) {
        throw new Error(`Keine Material-Dateien gefunden f√ºr: ${fach} Seite ${seiteNummer}

Erwartete Dateiformate:
‚Ä¢ MATERIAL_${normalizedFach}_SEITE_${seiteNummer}_(1).jpg
‚Ä¢ MATERIAL_${normalizedFach}_SEITE_${seiteNummer}_(2).jpg
‚Ä¢ etc.

Stelle sicher, dass die Dateien in MEGA hochgeladen sind.`);
    }

    console.log(`üìö ${foundFiles.length} Material-Dateien gefunden:`, foundFiles.map(f => f.name));
    return foundFiles;
}

export async function downloadAndProcessImage(file) {
    try {
        console.log('üì• Lade Datei herunter...');
        // Datei als Buffer herunterladen
        const data = await file.downloadBuffer();

        console.log('üî§ F√ºhre OCR durch...');

        // Verwende verbesserten OCR Service mit Retry-Logic
        const text = await performOCRWithRetry(data, 2);

        if (!text.trim()) {
            throw new Error('Kein Text in der Datei gefunden');
        }

        console.log('‚úÖ Text erfolgreich extrahiert');
        return text;

    } catch (error) {
        throw new Error(`Dateiverarbeitung fehlgeschlagen: ${error.message}`);
    }
}

export async function findHomeworkInMega() {
    try {
        console.log('üîç Suche ha.jpg in MEGA...');
        const storage = await connectToMega();

        // Durchsuche alle Dateien nach ha.jpg
        const files = storage.files;
        const foundFile = Object.values(files).find(file => {
            const name = file.name?.toLowerCase();
            return name && name.includes('ha') && (
                name.endsWith('.jpg') ||
                name.endsWith('.png') ||
                name.endsWith('.jpeg')
            );
        });

        if (!foundFile) {
            throw new Error('Keine ha.jpg in MEGA gefunden');
        }

        console.log(`üìã Hausaufgaben-Bild gefunden: ${foundFile.name}`);

        // Lade die Datei direkt als Buffer herunter
        const imageBuffer = await foundFile.downloadBuffer();

        // Erstelle einen data URL f√ºr die weitere Verarbeitung
        const base64 = imageBuffer.toString('base64');
        const dataUrl = `data:image/jpeg;base64,${base64}`;
        return dataUrl;

    } catch (error) {
        throw new Error(`MEGA Suche fehlgeschlagen: ${error.message}`);
    }
}

export async function solveProblem(fach, seiteNummer) {
    try {
        // API Key zur Laufzeit laden
        const apiKey = process.env.GEMINI_API_KEY;
        console.log('üîë API Key f√ºr L√∂sungen:', apiKey ? `JA (${apiKey.substring(0, 20)}...)` : 'NEIN');

        if (!apiKey || apiKey === 'YOUR_NEW_GEMINI_API_KEY_HERE') {
            throw new Error('GEMINI_API_KEY nicht gesetzt! Bitte in .env Datei eintragen.');
        }

        // GenAI zur Laufzeit initialisieren
        const genAI = new GoogleGenerativeAI(apiKey);

        // Finde die entsprechende Buchseite in MEGA
        const file = await findBookPage(fach, seiteNummer);

        // Lade die Datei herunter und f√ºhre OCR durch
        const extractedText = await downloadAndProcessImage(file);

        // Sende an Gemini zur L√∂sungsfindung
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

        const prompt = createSolutionPrompt(fach, seiteNummer, extractedText);

        console.log('ü§ñ Generiere L√∂sungen...');
        const result = await model.generateContent(prompt);
        const geminiResponse = await result.response;
        return geminiResponse.text();

    } catch (error) {
        throw error;
    }
}

export async function solveProblemWithImage(fach, seiteNummer) {
    try {
        // API Key zur Laufzeit laden
        const apiKey = process.env.GEMINI_API_KEY;
        console.log('üîë API Key f√ºr L√∂sungen:', apiKey ? `JA (${apiKey.substring(0, 20)}...)` : 'NEIN');

        if (!apiKey || apiKey === 'YOUR_NEW_GEMINI_API_KEY_HERE') {
            throw new Error('GEMINI_API_KEY nicht gesetzt! Bitte in .env Datei eintragen.');
        }

        // GenAI zur Laufzeit initialisieren
        const genAI = new GoogleGenerativeAI(apiKey);

        // Finde die entsprechende Buchseite in MEGA
        const file = await findBookPage(fach, seiteNummer);

        // Lade die Datei als Buffer herunter (f√ºr Discord)
        console.log('üì• Lade Originalbild herunter...');
        const imageBuffer = await file.downloadBuffer();

        // F√ºhre OCR durch f√ºr die Textanalyse
        console.log('üî§ F√ºhre OCR durch...');

        let text = '';
        try {
            text = await performOCRWithRetry(imageBuffer, 2);
        } catch (ocrError) {
            console.log('‚ö†Ô∏è OCR fehlgeschlagen, verwende Gemini Vision...');

            // Fallback: Verwende Gemini Vision f√ºr direkte Bildanalyse
            text = await analyzeImageWithGeminiVision(imageBuffer, genAI);
        }

        if (!text.trim()) {
            throw new Error('Kein Text in der Datei gefunden');
        }

        console.log('ü§ñ Sende an Gemini...');

        // Sende an Gemini zur L√∂sungsfindung
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

        const prompt = createSolutionPrompt(fach, seiteNummer, text);

        const result = await model.generateContent(prompt);
        const geminiResponse = await result.response;

        // Gib sowohl das Bild als auch die L√∂sung zur√ºck
        return {
            imageBuffer: imageBuffer,
            fileName: file.name || `${fach}_seite_${seiteNummer}.jpg`,
            solution: geminiResponse.text()
        };

    } catch (error) {
        throw error;
    }
}

// Gemini Vision Fallback f√ºr OCR
async function analyzeImageWithGeminiVision(imageBuffer, genAI) {
    try {
        console.log('üëÅÔ∏è Verwende Gemini Vision f√ºr Textextraktion...');

        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

        // Konvertiere Bild zu Base64
        const base64Image = imageBuffer.toString('base64');

        const imagePart = {
            inlineData: {
                data: base64Image,
                mimeType: "image/jpeg"
            }
        };

        const prompt = `
Extrahiere ALLEN sichtbaren Text aus diesem Bild einer Buchseite.

Aufgabe:
1. Erkenne und transkribiere JEDEN sichtbaren Text
2. Behalte die Struktur und Formatierung bei
3. Achte besonders auf Aufgabennummern und Inhalte
4. Gib den Text vollst√§ndig und strukturiert wieder

Bitte gib NUR den erkannten Text zur√ºck, keine zus√§tzlichen Kommentare.
`;

        const result = await model.generateContent([prompt, imagePart]);
        const response = await result.response;

        console.log('‚úÖ Gemini Vision Textextraktion erfolgreich');
        return response.text();

    } catch (visionError) {
        console.error('‚ùå Gemini Vision fehlgeschlagen:', visionError);
        throw new Error('Sowohl OCR als auch Gemini Vision fehlgeschlagen');
    }
}

// Neue Funktion: Material-Dateien mit Bildern zur√ºckgeben
export async function getMaterialWithImages(fach, seiteNummer) {
    try {
        // Finde alle Material-Dateien
        const files = await findMaterialFiles(fach, seiteNummer);

        const materialImages = [];

        // Lade alle Dateien herunter
        for (const file of files) {
            console.log(`üì• Lade Material-Datei herunter: ${file.name}`);
            const imageBuffer = await file.downloadBuffer();

            materialImages.push({
                imageBuffer: imageBuffer,
                fileName: file.name
            });
        }

        return materialImages;

    } catch (error) {
        throw error;
    }
}

function normalizeFach(fach) {
    const lowerFach = fach.toLowerCase();

    // Spezielle Mappings
    const mappings = {
        'franzoesisch': 'franz√∂sisch',
        'fr': 'franz√∂sisch',
        'religion ev': 'religion ev',
        'religion kt': 'religion kt'
    };

    return mappings[lowerFach] || lowerFach;
}

function createSolutionPrompt(fach, seiteNummer, text) {
    const fachSpezifisch = getFachSpezifischeAnweisungen(fach);

    return `
Du bist ein sehr hilfsbereiter Nachhilfe-Assistent f√ºr das Fach "${fach}". Analysiere den folgenden Text aus einem Schulbuch und l√∂se alle Aufgaben, die du findest.

Text von Seite ${seiteNummer}:
${text}

${fachSpezifisch}

Aufgabe:
1. Identifiziere alle √úbungen, Aufgaben und Fragen auf dieser Seite
2. L√∂se sie Schritt f√ºr Schritt
3. Erkl√§re deine L√∂sungswege verst√§ndlich und ausf√ºhrlich
4. Gib praktische Tipps zum Verst√§ndnis

Format deine Antwort strukturiert:

## üìö Aufgabe 1: [Aufgabentitel]
**L√∂sung:**
[Schritt-f√ºr-Schritt L√∂sung]

**Erkl√§rung:**
[Verst√§ndliche Erkl√§rung]

## üìö Aufgabe 2: [Aufgabentitel]
**L√∂sung:**
[Schritt-f√ºr-Schritt L√∂sung]

**Erkl√§rung:**
[Verst√§ndliche Erkl√§rung]

Falls keine klaren Aufgaben erkennbar sind, fasse den Inhalt zusammen und gib Lernhilfen f√ºr das Thema.

Sei geduldig, motivierend und erkl√§re alles so, dass es ein Sch√ºler gut verstehen kann.
`;
}

function getFachSpezifischeAnweisungen(fach) {
    const lowerFach = fach.toLowerCase();

    switch (lowerFach) {
        case 'mathe':
            return `
Spezielle Anweisungen f√ºr Mathematik:
- Zeige alle Rechenschritte deutlich
- Erkl√§re mathematische Konzepte und Formeln
- Gib Tipps f√ºr √§hnliche Aufgaben
- Pr√ºfe deine Ergebnisse`;

        case 'deutsch':
            return `
Spezielle Anweisungen f√ºr Deutsch:
- Erkl√§re Grammatikregeln und Rechtschreibung
- Gib Interpretationshilfen f√ºr Texte
- Erl√§utere Stilmittel und Textarten
- Hilf bei der Textanalyse`;

        case 'english':
            return `
Spezielle Anweisungen f√ºr Englisch:
- Gib √úbersetzungen und Erkl√§rungen
- Erkl√§re Grammatikregeln auf Deutsch
- Hilf bei Vokabeln und Phrasen
- Korrigiere Fehler und erkl√§re sie`;

        case 'franz√∂sisch':
        case 'franzoesisch':
        case 'fr':
            return `
Spezielle Anweisungen f√ºr Franz√∂sisch:
- Gib √úbersetzungen ins Deutsche
- Erkl√§re franz√∂sische Grammatik verst√§ndlich
- Hilf bei Aussprache und Vokabeln
- Erkl√§re kulturelle Besonderheiten`;

        case 'latein':
            return `
Spezielle Anweisungen f√ºr Latein:
- √úbersetze lateinische Texte ins Deutsche
- Erkl√§re Grammatik und Syntax
- Gib Hilfen zur Wortschatzerweiterung
- Erkl√§re historische Zusammenh√§nge`;

        case 'geschichte':
            return `
Spezielle Anweisungen f√ºr Geschichte:
- Erkl√§re historische Zusammenh√§nge
- Gib Zeitleisten und Daten
- Erkl√§re Ursachen und Auswirkungen
- Verbinde Vergangenheit mit Gegenwart`;

        case 'physik':
            return `
Spezielle Anweisungen f√ºr Physik:
- Erkl√§re physikalische Gesetze und Formeln
- Zeige Berechnungen mit Einheiten
- Gib Alltagsbezug zu Ph√§nomenen
- Erkl√§re Experimente und Versuche`;

        case 'chemie':
            return `
Spezielle Anweisungen f√ºr Chemie:
- Erkl√§re chemische Reaktionen und Formeln
- Zeige Berechnungen mit Molek√ºlen
- Erkl√§re Periodensystem und Bindungen
- Gib Sicherheitshinweise bei Experimenten`;

        case 'religion ev':
        case 'religion kt':
        case 'ethik':
            return `
Spezielle Anweisungen f√ºr ${fach}:
- Erkl√§re ethische und religi√∂se Konzepte
- Gib verschiedene Sichtweisen wieder
- Erkl√§re Textinterpretationen
- F√∂rdere kritisches Denken`;

        default:
            return `
Allgemeine Anweisungen:
- Gib ausf√ºhrliche, korrekte Antworten
- Erkl√§re Fachbegriffe verst√§ndlich
- Strukturiere deine Antworten klar
- Motiviere zum Lernen`;
    }
}
